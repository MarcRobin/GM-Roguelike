<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = spr_hero_up_idle;
image_index = 0;
image_speed = 0.5;
dir_hero = UP; //direction where the hero looks can be UP, DOWN, LEFT or RIGHT

hspd = 0;
vspd = 0;
phspd = 0;
pvspd = 0;

ar_spr_hero[0] = spr_hero_left_run; 
ar_spr_hero[1] = spr_hero_up_run;
ar_spr_hero[2] = spr_hero_right_run;
ar_spr_hero[3] = spr_hero_down_run;

dash_reload = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Moves

/*
//LEFT
if keyboard_check_pressed(vk_left) &amp;&amp; !keyboard_check(vk_right)
{
    sprite_index = spr_hero_left_run;
    image_index = 0;
    dir_hero = LEFT;
}

else if keyboard_check_released(vk_left) &amp;&amp; !keyboard_check(control_keys) 
{
    sprite_index = spr_hero_left_idle;
    image_index = 0;
}

//RIGHT
if keyboard_check_pressed(vk_right) &amp;&amp; !keyboard_check(vk_left)
{
    sprite_index = spr_hero_right_run;
    image_index = 0;
    dir_hero = RIGHT;
}

else if keyboard_check_released(vk_right) &amp;&amp; !keyboard_check(control_keys)
{
    sprite_index = spr_hero_right_idle;
    image_index = 0;
}

//UP
if keyboard_check_pressed(vk_up) 
{
    sprite_index = spr_hero_up_run;
    image_index = 0;
    dir_hero = UP;
}

else if keyboard_check_released(vk_up) &amp;&amp; !keyboard_check(control_keys)
{
    sprite_index = spr_hero_up_idle;
    image_index = 0;
}

//DOWN
if keyboard_check_pressed(vk_down) 
{
    sprite_index = spr_hero_down_run;
    image_index = 0;
    dir_hero = DOWN;
}

else if keyboard_check_released(vk_down) &amp;&amp; !keyboard_check(control_keys)
{
    sprite_index = spr_hero_down_idle;
    image_index = 0;
}
*/

//move position
hspd = 5*(keyboard_check(vk_right)) - 5*(keyboard_check(vk_left));
vspd = 5*(keyboard_check(vk_down)) - 5*(keyboard_check(vk_up));

if ( (hspd != phspd) &amp;&amp; (hspd != 0) ) || ( (vspd != pvspd) &amp;&amp; (vspd == 0) &amp;&amp; (hspd != 0) ) 
{
    var tmp = hspd/5 + 1;
    sprite_index = ar_spr_hero[tmp];
    image_index = 0;
    dir_hero = LEFT * (hspd == -5) + RIGHT * (hspd == 5);
}

if ( (vspd != pvspd) &amp;&amp; (vspd != 0) ) || ( (hspd != phspd) &amp;&amp; (hspd == 0) &amp;&amp; (vspd != 0) )
{
    var tmp = vspd/5 + 2;
    sprite_index = ar_spr_hero[tmp];
    image_index = 0;
    dir_hero = UP*(vspd == -5) + DOWN*(vspd == 5);
}

phspd = hspd;
pvspd = vspd;

if (hspd == 0 &amp;&amp; vspd == 0) { scr_hero_idle(); /*image_index = 0; ?*/}
else if (hspd != 0 &amp;&amp; vspd != 0) { hspd = sign(hspd)*sqrt(power(abs(hspd),2)/2); 
                                   vspd = sign(vspd)*sqrt(power(abs(vspd),2)/2); }//hspd /= 1.15; vspd /= 1.15; }                     //abs(p1) = p1/sign(p1) ?

x += hspd;
y += vspd;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dash
if keyboard_check_pressed(vk_space) &amp;&amp; dash_reload = -1
{
    x += 120*(dir_hero == RIGHT) - 120*(dir_hero == LEFT);
    y += 120*(dir_hero == DOWN) - 120*(dir_hero == UP);
    dash_reload = 0;
}

if dash_reload &gt; -1 &amp;&amp; dash_reload &lt; 600 //cd = 10 sec  (60 frame = 1 sec)
{
    dash_reload++;
}
else
{
    dash_reload = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
